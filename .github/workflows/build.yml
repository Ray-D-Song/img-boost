name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binary:
    name: Build Binary
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
        include:
          - os: ubuntu-22.04
            artifact_name: img-boost-linux-x64
            binary_path: build/img-boost
          - os: macos-latest
            artifact_name: img-boost-macos-x64
            binary_path: build/img-boost
          - os: windows-latest
            artifact_name: img-boost-windows-x64
            binary_path: build/Release/img-boost.exe
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake openssl

      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          C:\vcpkg\vcpkg integrate install

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          C:\vcpkg\vcpkg install openssl:x64-windows zlib:x64-windows libpng:x64-windows libjpeg-turbo:x64-windows libwebp:x64-windows

      - name: Download cpp-httplib (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path third_party/include
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/yhirose/cpp-httplib/v0.18.3/httplib.h" -OutFile "third_party/include/httplib.h"

      - name: Build dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x build_deps.sh
          ./build_deps.sh

      - name: Build project (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)

      - name: Build project (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Release -j

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.binary_path }}
          retention-days: 90

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-binary, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          cd artifacts
          for dir in */; do
            artifact_name="${dir%/}"
            cd "$dir"
            chmod +x * 2>/dev/null || true
            if [[ "$artifact_name" == *"windows"* ]]; then
              zip -r "../${artifact_name}.zip" *
            else
              tar czf "../${artifact_name}.tar.gz" *
            fi
            cd ..
          done

      - name: List artifacts
        run: ls -lh artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
